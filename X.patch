Index: lib/src/main/jni/Foundation/IOUniformer.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/jni/Foundation/IOUniformer.cpp	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/jni/Foundation/IOUniformer.cpp	(revision )
@@ -6,6 +6,7 @@
 
 static std::map<std::string/*orig_path*/, std::string/*new_path*/> IORedirectMap;
 static std::map<std::string/*orig_path*/, std::string/*new_path*/> RootIORedirectMap;
+static std::map<std::string/*orig_path*/, std::string/*new_path*/> IOReversedRedirectMap;
 
 
 static inline void
@@ -37,9 +38,13 @@
     return *(str.end() - 1) == suffix;
 }
 
-static void add_pair(const char *_orig_path, const char *_new_path) {
+static void add_pair(const char *_orig_path, const char *_new_path, bool reversed) {
     std::string origPath = std::string(_orig_path);
     std::string newPath = std::string(_new_path);
+    if (reversed) {
+        IOReversedRedirectMap.insert(std::pair<std::string, std::string>(origPath, newPath));
+        return;
+    }
     IORedirectMap.insert(std::pair<std::string, std::string>(origPath, newPath));
     if (endWith(origPath, '/')) {
         RootIORedirectMap.insert(
@@ -70,6 +75,16 @@
         const std::string &new_prefix = iterator->second;
         if (startWith(path, prefix)) {
             std::string new_path = new_prefix + path.substr(prefix.length(), path.length());
+            for (iterator = IOReversedRedirectMap.begin();
+                 iterator != IOReversedRedirectMap.end(); iterator++) {
+                const std::string &rprefix = iterator->first;
+                const std::string &rnew_prefix = iterator->second;
+                if (startWith(new_path, rprefix)) {
+                    std::string rnew_path =
+                            rnew_prefix + new_path.substr(rprefix.length(), new_path.length());
+                    return strdup(rnew_path.c_str());
+                }
+            }
             return strdup(new_path.c_str());
         }
     }
@@ -77,9 +92,10 @@
 }
 
 
-void IOUniformer::redirect(const char *orig_path, const char *new_path) {
-    LOGI("Start redirect : from %s to %s", orig_path, new_path);
-    add_pair(orig_path, new_path);
+void IOUniformer::redirect(const char *orig_path, const char *new_path, bool reversed) {
+    LOGI(reversed ? "Start reversed : from %s to %s" : "Start redirect : from %s to %s", orig_path,
+         new_path);
+    add_pair(orig_path, new_path, reversed);
 }
 
 const char *IOUniformer::query(const char *orig_path) {
Index: lib/src/main/java/com/lody/virtual/client/stub/DaemonService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/java/com/lody/virtual/client/stub/DaemonService.java	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/java/com/lody/virtual/client/stub/DaemonService.java	(revision )
@@ -1,11 +1,11 @@
 package com.lody.virtual.client.stub;
 
 import android.app.Notification;
-import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
-import android.os.IBinder;
 
+import com.lody.virtual.client.core.VirtualCore;
+import com.lody.virtual.client.hook.delegate.ForegroundNotificationDelegate;
 import com.lody.virtual.helper.component.BaseService;
 
 /**
@@ -29,9 +29,15 @@
 	@Override
 	public void onCreate() {
 		super.onCreate();
+		ForegroundNotificationDelegate foregroundNotificationDelegate = VirtualCore.get().foregroundNotificationDelegate;
+		if (foregroundNotificationDelegate == null) {
-        startService(new Intent(this, InnerService.class));
-        startForeground(NOTIFY_ID, new Notification());
+			startService(new Intent(this, InnerService.class));
+			startForeground(NOTIFY_ID, new Notification());
-
+		} else if (foregroundNotificationDelegate.isEnabled()) {
+			startForeground(NOTIFY_ID, foregroundNotificationDelegate.getNotification());
+			if (foregroundNotificationDelegate.isTryToHide())
+				startService(new Intent(this, InnerService.class));
+		}
 	}
 
 	@Override
Index: lib/src/main/jni/Foundation/IOUniformer.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/jni/Foundation/IOUniformer.h	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/jni/Foundation/IOUniformer.h	(revision )
@@ -28,7 +28,7 @@
 namespace IOUniformer {
     void startUniformer(int api_level);
 
-    void redirect(const char*orig_path, const char*new_path);
+    void redirect(const char *orig_path, const char *new_path, bool reversed = false);
 
     const char *query(const char *orig_path);
 
Index: lib/src/main/jni/Core.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/jni/Core.cpp	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/jni/Core.cpp	(revision )
@@ -34,6 +34,12 @@
     IOUniformer::redirect(org_path, new_path);
 }
 
+void reversed(JNIEnv *env, jclass jclazz, jstring orgPath, jstring newPath) {
+    const char *org_path = env->GetStringUTFChars(orgPath, NULL);
+    const char *new_path = env->GetStringUTFChars(newPath, NULL);
+    IOUniformer::redirect(org_path, new_path, true);
+}
+
 jstring query(JNIEnv *env, jclass jclazz, jstring orgPath) {
     const char *org_path = env->GetStringUTFChars(orgPath, NULL);
     const char *redirected_path = IOUniformer::query(org_path);
@@ -51,6 +57,8 @@
 static JNINativeMethod gMethods[] = {
         NATIVE_METHOD((void *) hook_io,  "nativeHook",                  "(I)V"),
         NATIVE_METHOD((void *) redirect, "nativeRedirect",              "(Ljava/lang/String;Ljava/lang/String;)V"),
+        NATIVE_METHOD((void *) reversed, "nativeReversedRedirect",
+                      "(Ljava/lang/String;Ljava/lang/String;)V"),
         NATIVE_METHOD((void *) query,    "nativeGetRedirectedPath",     "(Ljava/lang/String;)Ljava/lang/String;"),
         NATIVE_METHOD((void *) restore,  "nativeRestoreRedirectedPath", "(Ljava/lang/String;)Ljava/lang/String;"),
 
Index: lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java	(revision )
@@ -1,5 +1,6 @@
 package com.lody.virtual.client.hook.providers;
 
+import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.IInterface;
@@ -63,7 +64,30 @@
 		return fetcher;
 	}
 
+	private static IInterface createProxy(IInterface provider, ProviderHook hook) {
+		if (provider == null || hook == null) {
+			return null;
+		}
+		return (IInterface) Proxy.newProxyInstance(provider.getClass().getClassLoader(), new Class[]{
+				IContentProvider.TYPE,
+		}, hook);
+	}
 
+	public static IInterface createProxy(boolean external, String authority, IInterface provider) {
+		if (provider instanceof Proxy && Proxy.getInvocationHandler(provider) instanceof ProviderHook) {
+			return provider;
+		}
+		ProviderHook.HookFetcher fetcher = ProviderHook.fetchHook(authority);
+		if (fetcher != null) {
+			ProviderHook hook = fetcher.fetch(external, provider);
+			IInterface proxyProvider = ProviderHook.createProxy(provider, hook);
+			if (proxyProvider != null) {
+				provider = proxyProvider;
+			}
+		}
+		return provider;
+	}
+
 	public Bundle call(Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {
 
 		return (Bundle) method.invoke(mBase, args);
@@ -73,6 +97,10 @@
 		return (Uri) method.invoke(mBase, args);
 	}
 
+	public Cursor query(Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {
+		return (Cursor) method.invoke(mBase, args);
+	}
+
 	@Override
 	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
 		try {
@@ -86,6 +114,8 @@
 				return call(method, args);
 			} else if ("insert".equals(name)) {
 				return insert(method, args);
+			} else if ("query".equals(name)) {
+				return query(method, args);
 			}
 			return method.invoke(mBase, args);
 		} catch (Throwable e) {
@@ -99,30 +129,6 @@
 
 	protected void processArgs(Method method, Object... args) {
 
-	}
-
-	private static IInterface createProxy(IInterface provider, ProviderHook hook) {
-		if (provider == null || hook == null) {
-			return null;
-		}
-		return (IInterface) Proxy.newProxyInstance(provider.getClass().getClassLoader(), new Class[] {
-				IContentProvider.TYPE,
-		}, hook);
-	}
-
-	public static IInterface createProxy(boolean external, String authority, IInterface provider) {
-		if (provider instanceof Proxy && Proxy.getInvocationHandler(provider) instanceof ProviderHook) {
-			return provider;
-		}
-		ProviderHook.HookFetcher fetcher = ProviderHook.fetchHook(authority);
-		if (fetcher != null) {
-			ProviderHook hook = fetcher.fetch(external, provider);
-			IInterface proxyProvider = ProviderHook.createProxy(provider, hook);
-			if (proxyProvider != null) {
-				provider = proxyProvider;
-			}
-		}
-		return provider;
 	}
 
 	public interface HookFetcher {
Index: lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/java/com/lody/virtual/client/core/PatchManager.java	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/java/com/lody/virtual/client/core/PatchManager.java	(revision )
@@ -39,6 +39,7 @@
 import com.lody.virtual.client.hook.patchs.restriction.RestrictionPatch;
 import com.lody.virtual.client.hook.patchs.search.SearchManagerPatch;
 import com.lody.virtual.client.hook.patchs.telephony.TelephonyPatch;
+import com.lody.virtual.client.hook.patchs.telephony.TelephonyRegistryPatch;
 import com.lody.virtual.client.hook.patchs.user.UserManagerPatch;
 import com.lody.virtual.client.hook.patchs.vibrator.VibratorPatch;
 import com.lody.virtual.client.hook.patchs.wifi.WifiManagerPatch;
@@ -126,6 +127,7 @@
 			addPatch(new MountServicePatch());
 			addPatch(new BackupManagerPatch());
 			addPatch(new TelephonyPatch());
+			addPatch(new TelephonyRegistryPatch());
 			addPatch(new PhoneSubInfoPatch());
 			addPatch(new PowerManagerPatch());
 			addPatch(new AppWidgetManagerPatch());
\ No newline at end of file
Index: lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StartActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StartActivity.java	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StartActivity.java	(revision )
@@ -12,6 +12,7 @@
 import android.os.RemoteException;
 import android.util.TypedValue;
 
+import com.lody.virtual.IOHook;
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.Constants;
 import com.lody.virtual.client.hook.base.Hook;
@@ -133,7 +134,7 @@
             if (SCHEME_FILE.equals(packageUri.getScheme())) {
                 File sourceFile = new File(packageUri.getPath());
                 try {
-                    listener.onRequestInstall(sourceFile.getPath());
+                    listener.onRequestInstall(IOHook.getRedirectedPath(sourceFile.getPath()));
                     return true;
                 } catch (RemoteException e) {
                     e.printStackTrace();
Index: lib/src/main/java/com/lody/virtual/client/VClientImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/java/com/lody/virtual/client/VClientImpl.java	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/java/com/lody/virtual/client/VClientImpl.java	(revision )
@@ -30,6 +30,7 @@
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.client.fixer.ContextFixer;
 import com.lody.virtual.client.hook.delegate.AppInstrumentation;
+import com.lody.virtual.client.hook.delegate.IORedirectDelegate;
 import com.lody.virtual.client.hook.patchs.am.HCallbackHook;
 import com.lody.virtual.client.hook.providers.ProviderHook;
 import com.lody.virtual.client.hook.secondary.ProxyServiceFactory;
@@ -331,6 +332,16 @@
         ApplicationInfo info = mBoundApplication.appInfo;
         IOHook.redirect("/data/data/" + info.packageName + "/", info.dataDir + "/");
         IOHook.redirect("/data/user/0/" + info.packageName + "/", info.dataDir + "/");
+        IOHook.redirect(info.dataDir + "/lib", info.nativeLibraryDir);
+        IORedirectDelegate delegate = VirtualCore.get().ioRedirectDelegate;
+        if (delegate != null) {
+            Map<String, String> ioRedirect = delegate.getIORedirect();
+            for (Map.Entry<String, String> entry : ioRedirect.entrySet())
+                IOHook.redirect(entry.getKey(), entry.getValue());
+            Map<String, String> reversedRedirect = delegate.getIOReversedRedirect();
+            for (Map.Entry<String, String> entry : reversedRedirect.entrySet())
+                IOHook.reversed(entry.getKey(), entry.getValue());
+        }
         IOHook.hook();
     }
 
Index: lib/src/main/java/com/lody/virtual/IOHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/java/com/lody/virtual/IOHook.java	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/java/com/lody/virtual/IOHook.java	(revision )
@@ -118,6 +118,14 @@
         }
     }
 
+    public static void reversed(String origPath, String newPath) {
+        try {
+            nativeReversedRedirect(origPath, newPath);
+        } catch (Throwable e) {
+            VLog.e(TAG, VLog.getStackTraceString(e));
+        }
+    }
+
     public static void hook() {
         try {
             nativeHook(Build.VERSION.SDK_INT);
@@ -185,6 +193,8 @@
     private static native String nativeGetRedirectedPath(String orgPath);
 
     private static native void nativeRedirect(String orgPath, String newPath);
+
+    private static native void nativeReversedRedirect(String orgPath, String newPath);
 
     private static native void nativeHook(int apiLevel);
 
Index: lib/src/main/java/com/lody/virtual/client/hook/providers/ExternalProviderHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/java/com/lody/virtual/client/hook/providers/ExternalProviderHook.java	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/java/com/lody/virtual/client/hook/providers/ExternalProviderHook.java	(revision )
@@ -1,8 +1,13 @@
 package com.lody.virtual.client.hook.providers;
 
+import android.database.AbstractCursor;
+import android.database.Cursor;
+
 import com.lody.virtual.client.core.VirtualCore;
 
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.util.Map;
 
 /**
  * @author Lody
@@ -10,17 +15,100 @@
 
 public class ExternalProviderHook extends ProviderHook {
 
+    private static Map<String, String> mapList = VirtualCore.get().ioRedirectDelegate.getContentReversedRedirect();
+    private static boolean mapInited = false;
     public ExternalProviderHook(Object base) {
         super(base);
     }
 
     @Override
+    public Cursor query(Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {
+        return new ProxyCursor(super.query(method, args));
+    }
+
+    @Override
     protected void processArgs(Method method, Object... args) {
         if (args != null && args.length > 0 && args[0] instanceof String) {
             String pkg = (String) args[0];
             if (VirtualCore.get().isAppInstalled(pkg)) {
                 args[0] = VirtualCore.get().getHostPkg();
             }
+        }
+    }
+
+    private class ProxyCursor extends AbstractCursor {
+        Cursor src;
+
+        ProxyCursor(Cursor src) {
+            if (!mapInited) {
+                if (VirtualCore.get().ioRedirectDelegate != null)
+                    mapList = VirtualCore.get().ioRedirectDelegate.getContentReversedRedirect();
+                mapInited = true;
+            }
+            this.src = src;
+        }
+
+        @Override
+        public int getCount() {
+            return src.getCount();
+        }
+
+        @Override
+        public String[] getColumnNames() {
+            return src.getColumnNames();
+        }
+
+        @Override
+        public String getString(int column) {
+            String ret = src.getString(column);
+            if (src.getColumnName(column).equals("_data") && mapList != null) {
+                for (Map.Entry<String, String> entry : mapList.entrySet())
+                    if (ret.startsWith(entry.getKey()))
+                        return entry.getValue() + ret.substring(entry.getKey().length());
+                return ret;
+            }
+            return ret;
+        }
+
+        @Override
+        public short getShort(int column) {
+            return src.getShort(column);
+        }
+
+        @Override
+        public int getInt(int column) {
+            return src.getInt(column);
+        }
+
+        @Override
+        public long getLong(int column) {
+            return src.getLong(column);
+        }
+
+        @Override
+        public float getFloat(int column) {
+            return src.getFloat(column);
+        }
+
+        @Override
+        public double getDouble(int column) {
+            return src.getDouble(column);
+        }
+
+        @Override
+        public boolean isNull(int column) {
+            return src.isNull(column);
+        }
+
+        @Override
+        public int getType(int column) {
+            return src.getType(column);
+        }
+
+        @Override
+        public boolean onMove(int oldPosition, int newPosition) {
+            src.moveToPosition(newPosition);
+            return true;
         }
     }
 }
Index: lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java	(revision )
@@ -25,6 +25,8 @@
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.client.fixer.ContextFixer;
 import com.lody.virtual.client.hook.delegate.ComponentDelegate;
+import com.lody.virtual.client.hook.delegate.ForegroundNotificationDelegate;
+import com.lody.virtual.client.hook.delegate.IORedirectDelegate;
 import com.lody.virtual.client.hook.delegate.PhoneInfoDelegate;
 import com.lody.virtual.client.hook.delegate.TaskDescriptionDelegate;
 import com.lody.virtual.client.ipc.LocalProxyUtils;
@@ -85,6 +87,10 @@
     private PhoneInfoDelegate phoneInfoDelegate;
     private ComponentDelegate componentDelegate;
     private TaskDescriptionDelegate taskDescriptionDelegate;
+
+    public ForegroundNotificationDelegate foregroundNotificationDelegate;
+
+    public IORedirectDelegate ioRedirectDelegate;
 
     private VirtualCore() {
     }
Index: lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java	(revision 05cf2fefa5552487b15f243866f5ba59811e3cf2)
+++ lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java	(revision )
@@ -103,7 +103,7 @@
 					//noinspection unchecked
 					Object _infos = method.invoke(who, args);
 					List<ActivityManager.RecentTaskInfo> infos =
-							_infos instanceof ParceledListSlice
+							ParceledListSlice.TYPE.isInstance(_infos)
 									? ParceledListSlice.getList.call(_infos)
 									: (List)_infos;
 					for (ActivityManager.RecentTaskInfo info : infos) {
